/**
 * SARL-MASSIM - Interface between the SARL agent-oriented language
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.entities

import java.util.HashMap
import eis.iilang.ParameterList
import eis.iilang.Function
import au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator.Util
import eis.iilang.Percept
import au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator.SimStartBuffer

import massim.protocol.scenario.city.data.FacilityData
import massim.protocol.scenario.city.data.ChargingStationData
import massim.protocol.scenario.city.data.DumpData
import massim.protocol.scenario.city.data.ResourceNodeData

import massim.protocol.scenario.city.data.ShopData
import massim.protocol.scenario.city.data.StockData
import massim.protocol.scenario.city.data.StoredData
import massim.protocol.scenario.city.data.StorageData.TeamStoredData

import massim.protocol.scenario.city.data.StorageData
import massim.protocol.scenario.city.data.WellData
import massim.protocol.scenario.city.data.WorkshopData

import massim.protocol.scenario.city.data.ItemData

import massim.protocol.scenario.city.data.JobData
import massim.protocol.scenario.city.data.AuctionJobData
import massim.protocol.scenario.city.data.MissionData
import massim.protocol.scenario.city.data.ItemAmountData

import java.util.List
import java.util.ArrayList

/**
  * Responsible for the creation of java objects from eismassim Percept information provided by
  * the massim city server.
  */

class CityDataCreator {

	public static val FACILITY_TYPES = newHashSet(
		"chargingStation",
		"dump",
		"shop",
		"storage",
		"workshop",
		"resourceNode",
		"well"
	)

	public static val JOB_TYPES = newHashSet(
		"job",
		"auction",
		"mission"
	)

    /**
     * Constructs a new Facility object.
     */
    static def createFacility(p : Percept) : FacilityData {
		val name = Util.extractString(p.parameters.get(0))
		val lat = Util.extractDouble(p.parameters.get(1))
		val lon = Util.extractDouble(p.parameters.get(2))

		switch (p.name) {
			case "chargingStation": {
				val rate = Util.extractInt(p.parameters.get(3))
				return new ChargingStationData(name, lat, lon, rate);
			}
			case "dump": {
				return new DumpData(name, lat, lon);
			}
			case "shop": {
				val restock = Util.extractInt(p.parameters.get(3))
				val items = p.parameters.get(4) as ParameterList
				val stockData : List<StockData> = new ArrayList();
				for (item : items) {
					val f = item as Function
					val itemName = Util.extractString(f.parameters.get(0))
					// TODO: address SimStartBuffer stuff
					val itemObj = SimStartBuffer.getItem(itemName)
					val itemPrice = Util.extractInt(f.parameters.get(1))
					val itemQty = Util.extractInt(f.parameters.get(2))
					stockData.add(new StockData(itemName, itemPrice, itemQty))
				}
				return new ShopData(name, lat, lon, restock, stockData);
			}
			case "storage": {
				val ^capacity = Util.extractInt(p.parameters.get(3))
				val usedCapacity = Util.extractInt(p.parameters.get(4))
				val stored : List<StoredData> = new ArrayList<StoredData>()
				// TODO: will always be empty
				val storedTeam : List<TeamStoredData> = null
				val freeSpace = ^capacity - usedCapacity

				val items = p.parameters.get(5) as ParameterList
				for (item : items) {
					val f = item as Function
					val itemName = Util.extractString(f.parameters.get(0))
					val itemStored = Util.extractInt(f.parameters.get(1))
					val itemDelivered = Util.extractInt(f.parameters.get(2))
					stored.add(new StoredData(itemName, itemStored, itemDelivered));
				}

				return new StorageData(name, lat, lon, ^capacity, freeSpace, stored, storedTeam);
			}
			case "workshop": {
				return new WorkshopData(name, lat, lon)
			}
			case "resourceNode": {
				val resource = Util.extractString(p.parameters.get(3))
				return new ResourceNodeData(name, lat, lon, resource)
			}
			case "well": {
				val team = Util.extractString(p.parameters.get(3))
				val typeName = Util.extractString(p.parameters.get(4))
				val integrity = Util.extractInt(p.parameters.get(5))
				return new WellData(name, lat, lon, team, typeName, integrity)
			}
		}
	}

    /**
     * Constructs a new Job object.
     */
	static def createJob(p : Percept) : JobData {
		val name = Util.extractString(p.parameters.get(0))
		val storage = Util.extractString(p.parameters.get(1))
		val start = Util.extractInt(p.parameters.get(3))
		val end = Util.extractInt(p.parameters.get(4))
		val reward = Util.extractInt(p.parameters.get(2))
		val requiredItems = new ArrayList<ItemAmountData>()
		// TODO: will always be empty
		val deliveredItems = null

		// The required items are always at the end of the structure as the last argument
		var requireds = p.parameters.last as ParameterList

		for (r : requireds) {
			val required = r as Function
			val requiredItemName = Util.extractString(required.parameters.get(0))
			val requiredQty = Util.extractInt(required.parameters.get(1))
			// TODO: address SimStartBuffer stuff
			val itemVolume = SimStartBuffer.getItem(requiredItemName).volume
			requiredItems.add(new ItemAmountData(requiredItemName, requiredQty))
		}

		switch (p.name) {
			case "job" : {
				return new JobData(name,
					storage,
					start,
					end,
					reward,
					requiredItems,
					deliveredItems,
					JobData.POSTER_SYSTEM
				);
			}
			case "auction": {
				val fine = Util.extractInt(p.parameters.get(5))
				val lowestBid = Util.extractInt(p.parameters.get(6))
				val auctionTime = Util.extractInt(p.parameters.get(7))

				return new AuctionJobData(name,
					storage,
					start,
					end,
					reward,
					requiredItems,
					fine,
					lowestBid,
					auctionTime,
					deliveredItems,
					null // no poster provided
				)
			}
			case "mission": {
				val fine = Util.extractInt(p.parameters.get(5))
				val lowestBid = Util.extractInt(p.parameters.get(6))
				val auctionTime = Util.extractInt(p.parameters.get(7))
				return new MissionData(name,
					storage,
					start,
					end,
					reward,
					requiredItems,
					fine,
					lowestBid,
					auctionTime,
					deliveredItems,
					null, // no mission poster provided
					null // no mission ID provided
				)
			}
		}
	}
}
