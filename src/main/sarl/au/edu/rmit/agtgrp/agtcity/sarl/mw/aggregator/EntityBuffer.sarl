/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator

import eis.iilang.Percept
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.GameEntity
import java.util.Collection
import java.util.HashMap
/** 
 * Class to hold entity listings so they can be looked up by name
 * @param entities HASHMAP class used to keep track of entities.
 */
class EntityBuffer {
    public static var entities : HashMap<String, GameEntity>

    public static def init() {
        entities = new HashMap();
    }

	/**
	 * populate. Function that takes in a collection and maintains an updated HashMap of entities in MASSIM.
	 * @param percepts The collection of percepts from MASSIM.
	 */
    public static def populate(percepts : Collection<Percept>) {
        for (p : percepts) {
            if (p.name.equals("entity")) {
                var name = Util.extractString(p.parameters.get(0));	// name of the entity of the server, as per xml (not of the EI!)
                var team = Util.extractString(p.parameters.get(1));
                var lat = Util.extractDouble(p.parameters.get(2));
                var lon = Util.extractDouble(p.parameters.get(3));
                var role = Util.extractString(p.parameters.get(4));

                var ge : GameEntity
                if (entities.containsKey(name)) {
                    ge = entities.get(name);
                } else {
                    ge = new GameEntity(name,role,team,lat,lon)
                }
                entities.put(name, ge)	// push the game entity for entity with name 
            }
        }
    }

	/**
	 * get, gets a perticular entity by it's identifier (name).
	 * @param name String identifying the entity.
	 */
    public static def get(name : String) : GameEntity {
        return entities.get(name);
    }

}
