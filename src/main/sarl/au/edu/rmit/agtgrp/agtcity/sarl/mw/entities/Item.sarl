/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.entities

import java.util.Map
import java.util.HashMap
import eis.iilang.Percept
import au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator.Util
import eis.iilang.Function
import eis.iilang.ParameterList

/** 
 * @author keiran, Bob
 */
 /**
 * An Item Object which contains details about a particular item
 * @param name The name of the item
 * @param volume The volume the item takes up in a storage location
 */
class Item {
	public var name : String
	public var volume : double
	public var tools : Map<String, Tool>
	public var parts : Map<Item, Integer>
    /**
     * Constructs a new instance of an item. 
     */
    new(name : String, volume : double) {
        this.name = name
        this.volume = volume
        this.tools = new HashMap;
        this.parts = new HashMap;
    }
    
    new(percept : Percept) {
		this.tools = new HashMap;
    	this.parts = new HashMap;
    	this.name = Util.extractString(percept.parameters.get(0))
    	this.volume = Util.extractDouble(percept.parameters.get(1))
    	
    	var toolFunc = percept.parameters.get(2) as Function
    	var toolList = toolFunc.parameters.get(0) as ParameterList
    	
    	for (t : toolList){
    		var toolName = Util.extractString(t)
    		addTool(new Tool(toolName))
    	}

		// We do not fill the parts because these are themselves Items which may be objects already created elsewhere.
		// Better to then add them one by one.
		// CHECK SimStartBuffer.sarl where this is done globally...
    }
    
    /**
     * @return The name of an Item
     */
    def getName() : String{
        return name
    }
    
    /**
     * @return The volume the item takes up
     */
    def getVolume() : double{
        return volume
    }

	def getTools() : Map<String, Tool> {
		return this.tools
	}

	def getParts() : Map<Item, Integer> {
		return this.parts
	}
	
	

	def addTool(tool : Tool) : void {
    	this.tools.put(tool.name, tool)
    }
    
    def addPart(part : Item, qty : int) : void {
    	this.parts.put(part, qty)
    }


}
