/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM RMIT 2018+ server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.skills

import io.sarl.core.Logging
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_Reporting
import java.util.List
import java.util.ArrayList

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 */
skill S_ConsoleReporting implements C_Reporting {
	uses Logging
	
	var level : int
	val agentName : String

	new (agentName : String, l : int) {
		super() // Call the super's constructor
		this.level = l
		this.agentName = agentName
	}

	
	new (agentName : String) {
		super() // Call the super's constructor
		this.level = 0 
		this.agentName = agentName
	}


	//	Check Varidic (varargs in java) arguments in SARL: http://www.sarl.io/docs/official/reference/general/FuncDecls.html
	private def info_with_agent(message : String, params : Object*) {

		// Extend params with the agent name (last argument)
		var params2 : List<Object> = new ArrayList<Object>(params.size + 1)
		params2.addAll(params)
		params2.add(agentName)

		info(String.format("%s", message), params2.toArray())
	}


	def agent_says(message : String, params : Object*) {
		info_with_agent(message, params)		
	}

	def agent_shouts(message : String, params : Object*) {
		info_with_agent(message.toUpperCase, params)
	}



	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		setLoggingName(this.agentName)
		info_with_agent("Installing the Console Reporting skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner.
		// You should put all the resource release statements in this block of code.
		info_with_agent("Uninstalling the Console Reporting skill")
	}
}
// /////////////////////////////////////////////////
// END OF FILE
// /////////////////////////////////////////////////
