/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities

import java.nio.file.Path
import java.util.Map
import java.util.Collection
import java.util.Set

import eis.iilang.EnvironmentState
import eis.iilang.Percept
import eis.iilang.Action

import massim.protocol.scenario.city.data.EntityData

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 * Capacity to communicate with MAC 2018 game server.
 * 
 * - connect to game server (using configuration files)
 * - register players (using configuration files for credentials)
 * - perceive the environment (receive percepts)
 * - send actions to the game server (for the players registered) 
 * 
 */
capacity C_MassimTalking {



	// //////////////////////////////////////////////////////////////////////////
	// MAIN TOOLS: INTERACTION WITH GAME SERVER
	// //////////////////////////////////////////////////////////////////////////

	/**
	 * Create and start the Environment Interface and register all player connections
	 * 
	 * @return - true if initialization was successful
	 */
	def MT_initialize() : boolean


	/** 
	 * Register the entity named entityName to be controlled (no authentication done, just registration)
	 * 
	 * @param entityName - name of the entity to register for control
	 */
	def MT_registerEntityByName(entityName : String)


	/* 
	 * Make a player execute an action in the game server
	 */
	def MT_executeAction(playerName : String, action : Action)

	/*
	 * Sense all percepts for a player
	 * 
	 * For each player's entity, a collection of percepts is returned
	 * (generally, a player is of just one entity)
	 */
	def MT_senseAllEntityPercepts(playerName : String) : Map<String, Collection<Percept>>
	def MT_senseEntityPercepts(playerName : String) : Collection<Percept>



	// //////////////////////////////////////////////////////////////////////////
	// GET TOOLS
	// //////////////////////////////////////////////////////////////////////////

	/* 
	 * Obtain set of player names that have been registered
	 */
	def MT_getEntityNames() : Set<String>

	/** 
	 * Provides a map from player names to the player state
	 */	
	def MT_getAllEntityStates() : Map<String, EntityData>

	def MT_getEntityState(playerName : String) : EntityData

	def MT_updateEntityState(playerName : String, percepts : Collection<Percept>) : void

	def MT_reportEntityState(playerName : String) : String

	/*
	 * Obtain the current state of the environment interface (paused, running, killed)
	 */
	def MT_getStatus() : EnvironmentState

	/** 
	 * Retrieve the last step number sensed
	 * 
	 * @return - the last step number seen 
	 */
	def MT_getStepNo() : int


}
///////////////////////////////////////////////////
// END OF FILE
///////////////////////////////////////////////////
