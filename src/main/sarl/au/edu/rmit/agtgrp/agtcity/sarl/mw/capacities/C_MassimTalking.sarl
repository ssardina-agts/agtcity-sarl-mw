/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM RMIT 2018+ server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities

import eis.iilang.Action
import eis.iilang.EnvironmentState
import eis.iilang.Percept
import java.util.Collection
import java.util.Map
import java.util.Set
import massim.protocol.scenario.city.data.EntityData

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 * Capacity to communicate with MAC 2018+ game server.
 * 
 * - connect to game server (using configuration files)
 * - register entities (using configuration files for credentials)
 * - perceive the environment (receive percepts)
 * - send actions to the game server (for the entities registered) 
 * 
 */
capacity C_MassimTalking {



	// //////////////////////////////////////////////////////////////////////////
	// MAIN TOOLS: INTERACTION WITH GAME SERVER
	// //////////////////////////////////////////////////////////////////////////

	/**
	 * Create and start the Environment Interface and register all entity connections
	 * 
	 * @return - true if initialization was successful
	 */
	def MT_initialize() : boolean


	/** 
	 * Register the entity named entityName to be controlled (no authentication done, just registration)
	 * 
	 * @param entityName - name of the entity to register for control
	 */
	def MT_registerEntityByName(entityName : String)


	/* 
	 * Make a entity execute an action in the game server
	 * 
	 * @param entityName - the entity that is to execute the action
	 * @param action - the action to send to the game server for the entity
	 * @return true if the action was sent successfully
	 */
	def MT_executeAction(entityName : String, action : Action) : boolean

	/*
	 * Sense all percepts for an entity. Each percept is a single unit of info, like lat(X)
	 * 
	 */
	def MT_senseEntityPercepts(entityName : String) : Collection<Percept>



	// //////////////////////////////////////////////////////////////////////////
	// GET TOOLS
	// //////////////////////////////////////////////////////////////////////////

	/* 
	 * Obtain set of entity names that have been registered
	 */
	def MT_getEntityNames() : Set<String>

	/** 
	 * Provides a map from entity names to the entity state
	 */	
	def MT_getAllEntityStates() : Map<String, EntityData>

	@Pure
	def MT_getEntityState(entityName : String) : EntityData

	def MT_updateEntityState(entityName : String, percepts : Collection<Percept>) : void

	def MT_reportEntityState(entityName : String) : String

	/*
	 * Obtain the current state of the environment interface (paused, running, killed)
	 */
	def MT_getStatus() : EnvironmentState

	/*
	 * Kill the environment interface. To be used at the end of the scenario.
	 */
	def MT_kill() : void

	/** 
	 * Retrieve the last step number sensed
	 * 
	 * @return - the last step number seen 
	 */
	def MT_getStepNo() : int


}
///////////////////////////////////////////////////
// END OF FILE
///////////////////////////////////////////////////
