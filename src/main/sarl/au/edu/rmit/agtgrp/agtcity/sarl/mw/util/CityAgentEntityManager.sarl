/**
 * SARL-MASSIM - Interface between the SARL agent-oriented language
 * and the MASSIM 2018+ game server
 * Copyright (C) 2017-2020 The SARL-MASSIM Authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.util

import eis.iilang.Function
import eis.iilang.ParameterList
import eis.iilang.Percept
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.HashSet
import java.util.List
import java.util.Set
import java.util.stream.Collectors
import massim.protocol.scenario.city.data.ActionData
import massim.protocol.scenario.city.data.EntityData
import massim.protocol.scenario.city.data.ItemAmountData
import massim.protocol.scenario.city.data.WayPointData

import au.edu.rmit.agtgrp.agtcity.sarl.mw.util.Util

/**
 * 
 * Responsible for the creation of Java objects from EiSMASSimPercept information provided by MASSIM gameserver:
 * https://github.com/ssardina-agts/agtcity-server/blob/master/docs/eismassim.md
 * 
 * It relies on EntityData class from massim.protocol.scenario.city.data.EntityData:
 * https://github.com/ssardina-agts/agtcity-server/blob/master/protocol/src/main/java/massim/protocol/scenario/city/data/EntityData.java
 * 
 * EntityData(Integer currentBattery, Integer maxBattery, Integer currentLoad, Integer maxLoad,
 * 				Integer vision, Integer skill, Integer speed,
 * 				ActionData lastAction,
 * 				String facilityName, List<WayPointData> route, List<ItemAmountData> items,
 * 				String agentName, String team, String role, double lat, double lon)
 */
class CityAgentEntityManager {

	/**
	 * The name of the percept this manager operates with.
	 */
	public static val ENTITY_TYPES = newHashSet("entity")

	/**
	 * The percepts/attributes related to entity.
	 * 
	 * Unfortunately the attributes in EntityData don't directly translate to percept names.
	 * - (items vs hasItem, loadMax vs maxLoad, chargeMax vs maxCharge)
	 * - additional lastActionParams, lastActionResult
	 * If they did we could use:
	 * public static val ENTITY_ATTRIBUTES = EntityData.getDeclaredFields().stream().map([f|f.getName()]).collect(Collectors.toSet())
	 */
	public static val ENTITY_ATTRIBUTES : Set<String> = newHashSet(
		"charge",
		"maxBattery",
		"facility",
		"hasItem",
		"lastAction",
		"lastActionParams",
		"lastActionResult",
		"lat",
		"load",
		"maxLoad",
		"lon",
		"name",
		"role",
		"route",
		"routeLength",
		"skill",
		"speed",
		"team",
		"vision"
	)

	/** 
	 * Constructs a new record for an Entity from basic information
	 * 
	 * @param entityName - the name of the entity as in registration file
	 * @param entityRole - the role of the entity
	 * @param entityTeam - the team of the entity
	 * 
	 * @return an EntityData with the basic info filled
	 */
	static def createEntity(entityName : String, entityRole : String, entityTeam : String) : EntityData {
		return new EntityData(-1, -1, -1, -1, -1, -1, -1, null, null, null, null,
			entityName, entityTeam, entityRole,
			-1, -1);
	}

	/** 
	 * Constructs a new record for an Entity from a percept entity(name, team, lat, lon, role)
	 *  
	 * This is all we find out about entities perceived by other entities.
	 * For example team mates or opponents.
	 * 
	 * @param p - a single percept of type entity of form entity(name, team, lat, lon, role)
	 * @return an EntityData with the basic info filled
	 */
	static def createEntity(p : Percept) : EntityData {

		val playerName = Util.extractString(p.parameters.get(0))
		val playerTeam = Util.extractString(p.parameters.get(1))
		val lat = Util.extractDouble(p.parameters.get(2))
		val lon = Util.extractDouble(p.parameters.get(3))
		val playerRole = Util.extractString(p.parameters.get(4))
		return new EntityData(-1, -1, -1, -1, -1, -1, -1, new ActionData(null, null, null), null, null, null, playerName, playerTeam, playerRole,
			lat, lon);
	}

	/** 
	 * Takes an entity and updates its internal representation based on the collection of percepts
	 * The structure of all possible percepts in the collection can be found here:
	 * https://github.com/ssardina-agts/agtcity-server/blob/master/docs/eismassim.md
	 * 
	 * @param entity - the EntityData to be updated
	 * @param precepts - the collection of percepts received from the server
	 * @return entity fields names that were updated
	 */
	static def updateEntity(entity : EntityData, percepts : Collection<Percept>) : Set<String> {
		/* Records entity attributes that are identified as changed. */
		val attr_changed = newHashSet()
		val items : List<ItemAmountData> = newArrayList()
		var lastActionType : String
		val lastActionParams = newArrayList()
		var lastActionResult : String
		
		/* Collect the percepts relevant to the entity */
		val entityPercepts = percepts
			.stream()
			.filter([ percept : Percept |
				ENTITY_ATTRIBUTES.contains(percept.name)
			]).collect(Collectors.toList())
		
	
		/* Compare and update entity attributes, maintain list of what changed. */
		for (p : entityPercepts) {
			switch p.name {
				case "name": {
					val name = Util.extractString(p.parameters.get(0))
					/* Safely checking equality in event of both being null. */
					if ((name !== null && !name.equals(entity.name))
						|| (entity.name !== null && !entity.name.equals(name))
					) {
						entity.name = name
						attr_changed.add("name")
					}
				}
				case "charge": {
					val charge = Util.extractInt(p.parameters.get(0))
					if (charge != entity.charge) {
						entity.charge = charge
						attr_changed.add("charge")
					}
				}
				case "maxBattery": {
					val chargeMax = Util.extractInt(p.parameters.get(0))
					if (chargeMax != entity.chargeMax) {
						entity.chargeMax = chargeMax
						attr_changed.add("chargeMax")
					}
				}
				case "load": {
					val load = Util.extractInt(p.parameters.get(0))
					if (load != entity.load) {
						entity.load = load
						attr_changed.add("load")
					}
				}
				case "maxLoad": {
					val loadMax = Util.extractInt(p.parameters.get(0))
					if (loadMax != entity.loadMax) {
						entity.loadMax = loadMax
						attr_changed.add("loadMax")
					}
				}
				case "vision": {
					val vision = Util.extractInt(p.parameters.get(0))
					if (vision != entity.vision) {
						entity.vision = vision
						attr_changed.add("vision")
					}
				}
				case "skill": {
					val ^skill = Util.extractInt(p.parameters.get(0))
					if (^skill != entity.^skill) {
						entity.^skill = ^skill
						attr_changed.add("skill")
					}
				}
				case "speed": {
					val speed = Util.extractInt(p.parameters.get(0))
					if (speed != entity.speed) {
						entity.speed = speed
						attr_changed.add("speed")
					}
				}
				case "lastAction": {
					lastActionType = Util.extractString(p.parameters.get(0))
					// last action data has 3 parts: type/name, params, result
					// so we first collect, then compare (see below)
				}
				case "lastActionParams": {
					// lastActionParams([param1, param2, ...])
					if (p.parameters.get(0) !== null) {	// the action may not have had any parameter and is null
						val params = p.parameters.get(0) as ParameterList // [param1, param2...]
						for (param : params) { // build a list of stack data
							lastActionParams.add(Util.extractString(param))
						}
					}
					// last action data has 3 parts: type/name, params, result
					// so we first collect, then compare (see below)
				}
				case "lastActionResult": {
					lastActionResult = Util.extractString(p.parameters.get(0))
					// last action data has 3 parts: type/name, params, result
					// so we first collect, then compare (see below)
				}
				case "facility": {
					val facility = Util.extractString(p.parameters.get(0))
					/* Safely checking equality in event of both being null. */
					if ((facility !== null && !facility.equals(entity.facility)) ||
						(entity.facility !== null && !entity.facility.equals(facility))) {
						entity.facility = facility
						attr_changed.add("facility")
					}
				}
				case "routeLength": {
					val routeLength = Util.extractInt(p.parameters.get(0))
					if (routeLength != entity.routeLength) {
						entity.routeLength = routeLength
						attr_changed.add("routeLength")
					}
				}
				case "hasItem": { // hasItem(name, qty), potentially more than one
					var itemName = Util.extractString(p.parameters.get(0))
					var itemQty = Util.extractInt(p.parameters.get(1))
					items.add(new ItemAmountData(itemName, itemQty))
					// cannot check if changed here as items are spread across many percepts, check below
					
				}
				case "role": {
					val role = Util.extractString(p.parameters.get(0))
					/* Safely checking equality in event of both being null. */
					if ((role !== null && !role.equals(entity.role)) ||
						(entity.role !== null && !entity.role.equals(role))) {
						entity.role = role
						attr_changed.add("role")
					}
				}
				case "team": {
					val team = Util.extractString(p.parameters.get(0))
					/* Safely checking equality in event of both being null. */
					if ((team !== null && !team.equals(entity.team)) ||
						(entity.team !== null && !entity.team.equals(team))) {
						entity.team = team
						attr_changed.add("team")
					}
				}
				case "route": { // route([wp(index, lat, lon), ...])
					var params = p.parameters.get(0);
					var wps = params as ParameterList
					entity.route = new ArrayList<WayPointData>()
					for (w : wps) {
						var f = w as Function
						var index = Util.extractInt(f.parameters.get(0));
						var routeLat = Util.extractDouble(f.parameters.get(1))
						var routeLon = Util.extractDouble(f.parameters.get(2))
						var wayPoint = new WayPointData(index, routeLat, routeLon)
						entity.route.add(wayPoint)
					}
				}
				case "lat": {
					val lat = Util.extractDouble(p.parameters.get(0))
					if (lat != entity.lat) {
						entity.lat = lat
						attr_changed.add("lat")
					}
				}
				case "lon": {
					val lon = Util.extractDouble(p.parameters.get(0))
					if (lon != entity.lon) {
						entity.lon = lon
						attr_changed.add("lon")
					}
				}
			}
		}
		
		// Lastly, we must check changes in items being carried by entity 
		// items carried are not in one percept in a list, they ar spread across many percepts
		if (!Util.equalHasItems(entity.items, items)) {
			entity.items = items
			attr_changed.add("items")
		}

		if (lastActionType !== null) {
			val lastAction = new ActionData(lastActionType, lastActionParams, lastActionResult)
			if (!lastAction.equals(entity.lastAction)) {
				entity.lastAction = lastAction
				attr_changed.add("lastAction")
			}
		}


		// report the attributes changed
		return attr_changed
	}


	/** 
	 * Get the data that has changed from one EntityData to another 
	 * 
	 * @param entity0 - the previous EntityData 
	 * @param entity1 - the new EntityData
	 * @return a set of Strings stating which data has changed from entity0 to entity1
	 */
	static def getEntityDifferences(entity0 : EntityData, entity1 : EntityData) : HashSet<String> {
		val changes = newHashSet()

		if(entity0 === null && entity1 === null) return changes
		if(entity0 === null) {
			changes.add("new")
			return changes
		}
		if (entity1 === null) {
			changes.add("deleted")
			return changes
		} 
		
		
		if(entity0.name !== entity1.name) changes.add("name")
		if(entity0.team !== entity1.team) changes.add("team")
		if(entity0.role !== entity1.role) changes.add("role")
		if(entity0.chargeMax !== entity1.chargeMax) changes.add("maxBattery")
		if(entity0.charge !== entity1.charge) changes.add("charge")
		if(entity0.loadMax !== entity1.loadMax) changes.add("maxLoad")
		if(entity0.vision !== entity1.vision) changes.add("vision")
		if(entity0.^skill !== entity1.^skill) changes.add("skill")
		if(entity0.speed !== entity1.speed) changes.add("speed")
		if(entity0.lat !== entity1.lat) changes.add("lat")
		if(entity0.lon !== entity1.lon) changes.add("lon")
		if(entity0.facility !== entity1.facility) changes.add("facility")

		if(entity1.route !== null && !entity1.route.equals(entity1.route)) changes.add("route")
		if(entity0.routeLength !== entity1.routeLength) changes.add("routeLength")

		//  This is needed because EntityData uses List<ItemAmount>, so we need a special equals() that ignores order
		if(!Util.equalHasItems(entity0.items, entity1.items)) changes.add("items")

		if(entity1.lastAction !== null && !entity1.lastAction.equals(entity0.lastAction)) changes.add("lastAction")


		return changes
	}
	
	
	
	
	
	
	
	
	
	
		
	
	/**
	 * Get the set of missing percepts' names that are missing from a collection of percepts received
	 * (e.g., when the agent carries nothing, hasItem() percept won't be received)
	 * 
	 * @param percepts - a collection of percepts
	 * @return a set of percepts type names
	 */
	private static def getMissingPercepts(percepts : List<Percept>) : Set<String> {
		val missingPercepts = new HashSet()
		
		if (percepts.length != ENTITY_ATTRIBUTES.size()) {
			var expecting = ENTITY_ATTRIBUTES.toSet()
			var received = percepts.stream().map([p|return p.name]).collect(Collectors.toSet())
			
			expecting.removeAll(received)
			missingPercepts.add(expecting)

			return expecting
		}
	}

	/* 
	 * Return a formatted table with a summary of the player state
	 *
	 * @param the entity we want to report
	 * @return a String with a reporting statement of the entity current (basic) state
	 */
	static def reportState(entity : EntityData) : String {

		/* Columns in the printed formatted table. */
		val columns = 2
		/* Width of each column. */
		val columnWidth = "50"

		/* The entity attributes to print. */
		var tableItems : String[] = #[
			String.format("name %s", entity.name),
			String.format("role %s", entity.role),
			String.format("team %s", entity.team),
			String.format("at (%f, %f) %s",
				entity.lat.doubleValue, entity.lon.doubleValue,
				(entity.facility === null || entity.facility.isEmpty) ? "" : String.format("(%s)", entity.facility)
			),
			String.format("charge %d (max %d)",
				entity.charge.intValue, entity.chargeMax.intValue
			),
			String.format("load %d (max %d)",
				entity.load.intValue, entity.loadMax.intValue
			),
			String.format("lastAction %s", entity.lastAction),
//			String.format("route: %s", entity.route),	// to directly use .toString()
			String.format("route: %s", entity.route === null ? "none" : entity.route
				.stream()
				.map([ wp |
					wp.index + ":" + "(" + wp.lat + ", " + wp.lon + ")"
				]).collect(Collectors.joining(", "))
			),
			String.format("routeLength %d", entity.routeLength.intValue),
			String.format("charge %d", entity.charge.intValue),
			String.format("vision %d", entity.vision.intValue),
			String.format("skill %d", entity.^skill.intValue),
			String.format("speed %d", entity.speed.intValue),
			String.format("items: %s\n", entity.items === null ? "none" : entity.items
				.stream()
				.map([ i |
					"["+i.name + ", " + i.amount + "]"
				]).collect(Collectors.joining(", "))
			)
		]

		/* Build a format string to layout the table correctly. */
		var formatString = ""
		for (var n : int = 0; n < tableItems.size(); n++) {
			val tableEntry = "%" + (n + 1) + "$-" + columnWidth + "s"
			if (n % columns == 0) {
				formatString += "\n"
			}
			formatString += tableEntry
		}

		/* Return the complete report formatted as a table. */
		return String.format(formatString, tableItems)
	}
}
