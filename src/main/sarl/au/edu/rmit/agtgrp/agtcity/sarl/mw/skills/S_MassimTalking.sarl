/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.skills

import au.edu.rmit.agtgrp.agtcity.sarl.mw.util.CityAgentEntityManager
import au.edu.rmit.agtgrp.agtcity.sarl.mw.util.Util
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_MassimTalking
import eis.exceptions.ActException
import eis.exceptions.AgentException
import eis.exceptions.ManagementException
import eis.iilang.Action
import eis.iilang.EnvironmentState
import eis.iilang.Percept
import io.sarl.core.Logging
import java.io.File
import java.io.FileWriter
import java.io.IOException
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.util.Collection
import java.util.HashMap
import java.util.HashSet
import java.util.Map
import java.util.Set
import java.util.stream.Collectors
import javax.management.relation.RelationException
import massim.eismassim.EnvironmentInterface
import massim.eismassim.Log
import massim.protocol.scenario.city.data.EntityData
import org.json.JSONArray
import org.json.JSONObject

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 * Skill implementing the C_MassimTalking capacity to conncet to MAC Agents in City MASSIM 2017 Game Server
 * 
 * - connect to game server (using configuration files)
 * - register entitys (using configuration files for credentials)
 * - perceive the environment (receive percepts)
 * - send actions to the game server (for the entitys registered) 
 * 
 * Uses the MASSIM EI interface from EISHUB (https://github.com/eishub/massim)
 * 
 * NOTE: we call agents to SARL agents; and entitys to agents in the MASSIM simulation.
 * Hence, a SARL agent, may register and control one more entitys in the simulation (even all)
 */
skill S_MassimTalking implements C_MassimTalking {
	uses Logging

	// /////////////////////////////////////////////////////////////////////////
	// DATA
	// //////////////////////////////////////////////////////////////////////////
	var eiRegistrationFile : Path	// Game server registration file (host, up, entity connections with credentials, etc.)
	
	var connected : boolean = false
	var stepNo : int = 0 // last step number seen

	
	/* 
	 * EISMASSim is based on the Environment Interface Standard (EIS), a proposed standard for agent-environment interaction. 
	 * 
	 * EISMASSim maps the communication between entitys and the MASSim server, (i.e. sending and receiving XML-messages), 
	 * to Java method calls. 
	 * It also automatically establishes and maintains connections to a specified MASSim server.
	 * In other words, EISMASSim is a proxy environment on the client side which handles communication with the 
	 * MASSim server completely by itself.
	 * 
	 * Check: https://github.com/agentcontest/massim/blob/master/docs/eismassim.md
	 */
	var public ei : EnvironmentInterface // main handler for the skill (from massim.eismassim)

	/* 
	 * Store information about entities in the game (indexed by their name) 
	 * (for all that have been authenticated in the game server)
	 * 
	 */
	var entities : Map<String, EntityData> = new HashMap<String, EntityData>()

	/*
	 * Stores all the entitys in the game server that I will connect and control
	 */
	var myEntities : Set<String> = new HashSet<String>

	// /////////////////////////////////////////////////////////////////////////
	// CONSTRUCTORS
	// //////////////////////////////////////////////////////////////////////////
	new (eiMassimConfigFile : Path, eiLogOn : boolean = true) {
		super() // Call the super's constructor
		this.eiRegistrationFile = eiMassimConfigFile
		massim.eismassim.Log.setLogOn(eiLogOn)	// set EI LogOn: if True, XML messages will be print out
	}

	// //////////////////////////////////////////////////////////////////////////
	// MAIN TOOLS: INTERACTION WITH GAME SERVER
	// //////////////////////////////////////////////////////////////////////////

	/* 
	 * Sets the configuration file containing the configuration of entitys in the game
	 */
	def MT_setPlayerAgentsConfig(eiMassimPlayerAgentsConfigFile : Path) {
		
	}

	/**
	 * Register the entity named entityName to control
	 */
	def MT_registerEntityByName(entityName : String) {
		myEntities.add(entityName)
	}


	/*
	 * Initialize and start the Environment Interface. 
	 * 
	 * Creates the EI, connects all entities to game server, and register appropriate EI agents to control them
	 */
	def MT_initialize() : boolean {
		if (eiRegistrationFile === null) {
			warning("Trying to register the game server, but no information about it is registered! :-(")
			return false
		}

		// Filter the registration file wrt the set of registered entities  in the MW to be controlled (stored in myEntities)
		// If myEntities is empty, then control ALL the ones listed in the registration file
		var filtered_eiRegistrationFile : Path = eiRegistrationFile
		if (!myEntities.empty) {
			filtered_eiRegistrationFile = filterRegistrationFile(eiRegistrationFile, myEntities)
		}
	
		// TODO: if this fails (e.g., file is not there) it keeps going, does not throw exception!
		ei = new EnvironmentInterface(filtered_eiRegistrationFile.toString)
		try {
				// This is where the EI is started and connections are established to server for entities
				// Each entity is authenticated to server, and they are re-connected if they drop.       		
				// Check method run() in EnvironmentInterface
				ei.start()
				connected = true
			} catch (e : ManagementException) {
				e.printStackTrace()
				connected = false
			}

		// If we are connected, register one EI agent "ei_entity" per entity authenticated
		//
		// So, the EI agent ei_entityA1 will manage entityA1 (with username agentA1, for example).
		// In general an EI agent may control more than one entity, but we do a 1-to-1 match between
		// EI agents and entities controlled in the game
		if (connected)	{
			ei.entities.forEach( [ entity : String | 
				registerEIAgent(String.format("%s", entity), entity, "unknown", "unknown")
			])
		}

		return connected
	}

	/* 
	 * Make a player execute an action in the game server
	 * 
	 * @param entityName - the entity that is to execute the action
	 * @param action - the action to send to the game server for the entity
	 * @return true if the action was sent successfully
	 */
	def MT_executeAction(entityName : String, action : Action) : boolean {
		try {
			ei.performAction(entityName, action)
		} catch (e : ActException) {
			error("I was not able to execute action {0} for agent {1}", action.getName(), entityName)
			e.printStackTrace
			return false
		}
		return true
	}

	/** 
	 * This yields the percept of the first entity the entity is of. 
	 * In this game, entity are of one entity so this is enough
	 */
	def MT_senseEntityPercepts(entityName : String) : Collection<Percept> {
		// This is where the sensing form the server happens via the EI
		var entityPercepts = ei.getAllPercepts(entityName).values().get(0)

		// update entity state with the first collection (only works if entity is linked to just one entity)
		MT_updateEntityState(entityName, entityPercepts) // update the agent data

		return entityPercepts 
	}

	// //////////////////////////////////////////////////////////////////////////
	// AUXILIARLY PRIVATE TOOLS
	// //////////////////////////////////////////////////////////////////////////

	/* 
	 * Register a new EI Agent and link it to some entity connection to control/sense it
	 */
	private def registerEIAgent(eiAgent : String, entityName : String, entityTeam : String, entityRole : String) {
		// FIRST, we register the new EI agent name in the EI
		try {
			ei.registerAgent(eiAgent)
		} catch (e : AgentException) {
			e.printStackTrace()
		}
		// SECOND, we associate/link the EI agent to the entity connection entityName (representing some entity in the game server)
		//		With this, the EI agent will be able to sense and control the entity
		//		We do a 1-to-1 mapping from EI Agent toconnected entities
		try {
			ei.associateEntity(eiAgent, entityName);
		} catch (e : RelationException) {
			e.printStackTrace()
		}

		// TODO: how to check if the agent did really connect to the server? seems that even if the server is down
		// the EI system register the agent
		if (ei.getAssociatedEntities(eiAgent).contains(entityName)) {
			debug("EI agent *{0}* has been successfully associated with game entity *{1}*", eiAgent, entityName)
			this.entities.put(eiAgent, CityAgentEntityManager.createEntity(eiAgent, entityRole, entityTeam))
		} else {
			warning("Unsuccessful association of agent *{0}* with entity *{1}*", eiAgent, entityName)
		}
	}

	/* 
	 * Takes a JSON registration file and filters the entities listed to  keep only those in filteredPlayers
	 * 
	 * @param eiRegitrationFile an EI registration file (with server and entity information)
	 * @param entities array of entities to keep
	 * @returns a temporary file that is a projection of the original file
	 */
	private def filterRegistrationFile(eiRegitrationFile : Path, entities : String[]) : Path {
		var config : JSONObject
		try {
			config = new JSONObject(new String(Files.readAllBytes(Paths.get(eiRegitrationFile.toString))))
			// System.out.println(config.toString(4))

	        // Filter the entities to the ones with name in global variable myEntities
			// Result stored in jsonEntitiesFiltered
	        var jsonEntities : JSONArray = config.optJSONArray("entities")
	        if(jsonEntities === null) jsonEntities = new JSONArray()
			var jsonEntitiesFiltered = new JSONArray()
			for (var i = 0; i < jsonEntities.length(); i++) {
				val jsonEntity : JSONObject = jsonEntities.optJSONObject(i)
				if(jsonEntity == null) continue
				val name : String = jsonEntity.optString("name")
				if (entities.contains(name)) { // FILTER HAPPENS HERE!!
					jsonEntitiesFiltered.put(jsonEntity)
				}
			}
			// Now update original config JSON (remove all entities and add the filtered ones)
			config.remove("entities")
			config.put("entities", jsonEntitiesFiltered)
		} catch (e : IOException) {
			e.printStackTrace();
		}

		val newFile : File = File.createTempFile("filtered_eiMassimSeverConfigFile", ".json")
		val writer : FileWriter = new FileWriter(newFile)
		writer.write(config.toString(4))
		writer.close()

		return newFile.toPath
	}

	// //////////////////////////////////////////////////////////////////////////
	// GETTERS & SETTERS
	// //////////////////////////////////////////////////////////////////////////

	/* 
	 * Obtain the current state of the environment interface (paused, running, killed)
	 */
	def MT_getStatus() : EnvironmentState {
		return ei.getState()
	}

	def MT_getEntityNames() : Set<String> {
		return entities.keySet()
	}

	/** 
	 * Provides a map from entity names to the entity state
	 */	
	def MT_getAllEntityStates() : Map<String, EntityData> {
		return entities
	}
	def MT_getEntityState(entityName : String) : EntityData {
		return entities.get(entityName)
	}




	/**
	 * Update the entity state in place.
	 */
	def MT_updateEntityState(entityName : String, percepts : Collection<Percept>): void {
		val attributesUpdated = CityAgentEntityManager.updateEntity(entities.get(entityName), percepts)
		
		System.out.println("UPDATED ENTITY, FIELDS CHANGED:")
		System.out.println(String.join(",", attributesUpdated))
		
		val stepPercept = percepts.stream().filter([p | "step".equals(p.name)]).collect(Collectors.toList())
		val stepNo = Util.extractInt(stepPercept.get(0).parameters.get(0))
		
		if (this.stepNo < stepNo) {
			this.stepNo = stepNo
		}
	}

	def MT_reportEntityState(entityName : String) : String {
		return CityAgentEntityManager.reportState(entities.get(entityName))
	}

	/** 
	 * Retrieve the last step number sensed
	 * 
	 * @return - the last step number seen 
	 */
	def MT_getStepNo() : int {
		return stepNo
	}

	// //////////////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////////
	// /////////////////////////////////////////////////////////////////////////
	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		info("Installing the skill to talk to MASSIM Agents in City 2018+ Game Server")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner.
		// You should put all the resource release statements in this block of code.
		info("Un-installing the skill to talk to MASSIM Agents in City 2018+ Game Server")
	}
}
