/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.util

import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_ActionStatusInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_ChargingStationInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_DumpInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_JobInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_ResourceInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_ShopInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_StorageInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_TellEntityInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_TellPlayerTeamInfo
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_WorkshopInfo
import eis.iilang.Percept
import java.util.ArrayList
import java.util.Collection
import java.util.HashMap
import java.util.HashSet
import java.util.List
import java.util.Set
import massim.protocol.scenario.city.data.AuctionJobData
import massim.protocol.scenario.city.data.ChargingStationData
import massim.protocol.scenario.city.data.DumpData
import massim.protocol.scenario.city.data.EntityData
import massim.protocol.scenario.city.data.FacilityData
import massim.protocol.scenario.city.data.ItemData
import massim.protocol.scenario.city.data.JobData
import massim.protocol.scenario.city.data.MissionData
import massim.protocol.scenario.city.data.ResourceNodeData
import massim.protocol.scenario.city.data.RoleData
import massim.protocol.scenario.city.data.ShopData
import massim.protocol.scenario.city.data.StorageData
import massim.protocol.scenario.city.data.WellData
import massim.protocol.scenario.city.data.WorkshopData
import java.util.function.Predicate
import java.util.Map

/** 
 * Class used to represent a state of the simulation as seen by entities
 * The SARL agent may build or update a state from the percepts received for the many entities it controls
 */
class State {

	/*
	 * These data structures keep track of all the information known so far from the game, as received
	 * from all agent players in the team
	 * 
	 * The are all hash maps mapping the name id to an object storing the corresponding information
	 */
	public var id : String
	public var mapName : String
	public var seedCapital : int
	public var simulationLength : int
	public var team : String
	public var money : int

	/**
	 * Different complex information indexed by their name
 */
	public var entities : HashMap<String, EntityData>
	public var jobs : HashMap<String, JobData>
	public var facilities : HashMap<String, FacilityData>
	public var items : HashMap<String, ItemData>
	public var roles : HashMap<String, RoleData>

	/**
	 * The last step that a given piece of game information was observed.
 */
	public var stepLastSeen : HashMap<String, Integer>

	
	/**
	 * Constructor that initializes all of the HashMaps to empty
	 */
	new() {
		this.money = 0

		this.entities = new HashMap()	// other entities seen (only some attributes are observed)
		this.jobs = new HashMap()
		this.facilities = new HashMap()
		this.items = new HashMap()
		this.roles = new HashMap()

		this.stepLastSeen = new HashMap()
	}

	/**
	 * Adds sim-start data to aggregator maintained data-structures.
	 * https://github.com/ssardina-agts/agtcity-server/blob/master/docs/eismassim.md#sim-start-percepts
	 */
	def recordSimStartData(percepts : Collection<Percept>) {
		for(p : percepts){
			switch(p.name){
				case "id" :{
					id = Util.extractString(p.parameters.get(0))
				}
				case "map" : {
					mapName = Util.extractString(p.parameters.get(0))
				}
				case "seedCapital" : {
					seedCapital = Util.extractInt(p.parameters.get(0))
				}
				case "steps" : {
					simulationLength = Util.extractInt(p.parameters.get(0))
				}
				case "team" : {
					team = Util.extractString(p.parameters.get(0))
				}
				case "item": {
					val item = CityDataCreator.createItem(p)
					items.put(item.getName(), item)
				}
				case "role": {
					val role = CityDataCreator.createRole(p)
					roles.put(role.getName(), role)
				}
			}
		}
	}
	

	/**
	 * Updates the aggregated game state.
	 * 
	 * 1. Filter out facilities, jobs, entities, items from the game percept.
	 * 2. Create/update the Java representation of them within this skill.
	 * 
	 * @param percepts received for the current step.
	 */
	def updateAggregatedGameState(percepts : Collection<Percept>, step : int) {
		for (p : percepts) {
			if (CityDataCreator.FACILITY_TYPES.contains(p.name)) { // p = chargingStation(..) dump(...) shop(...)
				val facility = CityDataCreator.createFacility(p)
				this.facilities.put(facility.name, facility)
				this.stepLastSeen.put(facility.name, step)
			} else if (CityDataCreator.JOB_TYPES.contains(p.name)) { //	p = job(...) or auction(..) or mission(..)
				val job = CityDataCreator.createJob(p)
				this.jobs.put(job.getId(), job)
				this.stepLastSeen.put(job.getId(), step)
			} else if (CityAgentEntityManager.ENTITY_TYPES.contains(p.name)) {	// p = entity(....)
				val entity = CityAgentEntityManager.createEntity(p)
				this.entities.put(entity.getName(), entity)
				this.stepLastSeen.put(entity.getName(), step)
			} else if (p.name.equals("massium")) {
				this.money = Util.extractInt(p.parameters.get(0))
			}
		}
	}

	def static getStateDifference(state0 : State, state1 : State) : Map<String, HashSet<String>> {
		var changes : Map<String, HashSet<String>> = new HashMap<String, HashSet<String>> 
		
		// Nothing of this is meant to change from step to step
//		if(state0.money !== state1.money) changes.add("money")
//		if(state0.id !== state1.id) changes.add("id")
//		if(state0.mapName !== state1.mapName) changes.add("mapName")
//		if(state0.seedCapital !== state1.seedCapital) changes.add("seedCapital")
//		if(state0.simulationLength !== state1.simulationLength) changes.add("simulationLength ")
//		if(state0.team!== state1.team) changes.add("team")

		// Add changes on entities
		state1.entities.keySet.forEach([ entity : String |
			System.out.println(state1.entities.get(entity))
			
			val changes_entity = 
			CityAgentEntityManager.getEntityDifferences(state0.entities.get(entity), state1.entities.get(entity))
			if (!changes_entity.empty) changes.put(entity, changes_entity)
		])
		
		return changes 
	}

	def getStateDifference(state : State) : Map<String, HashSet<String>> {
		return State.getStateDifference(state, this)
	}
	
	
	
	
	///////////////////////////////////////////////////////////////////////////////
	//	GETTERS
	// /////////////////////////////////////////////////////////////////////////////

	/*
	 * Methods to extract individual information from percepts
	 * 
	 * @return entity hashmap name -> EntityData
	 */

	/** 
	 * Get team member entities with basic details.
	 */
	def getTeamEntities() : HashMap<String, EntityData> {
		return getMatchingEntities([ entity : EntityData |
			// return true if our team
			return team.equals(entity.team)
		])
	}

	/** 
	 * Get opposition entities with basic details.
	 * 
	 * @return entity HashMap name -> EntityData
	 */
	def getOppositionEntities() : HashMap<String, EntityData> {
		return getMatchingEntities([ entity : EntityData |
			// return true if not our team
			return !team.equals(entity.team)
		])
	}

	/** 
	 * Get entities matching a predicate with basic details.
	 * 
	 * @param filter a predicate to filter by
	 * @return entity HashMap name -> EntityData
	 */
	def getMatchingEntities(filter : Predicate<EntityData>) : HashMap<String, EntityData> {
		val filtered_entities  : HashMap<String, EntityData> = newHashMap()
		val stream_entities = entities
			.values()
			.stream()
			.filter(filter)
		stream_entities.map([ entity : EntityData |
			filtered_entities.put(entity.getName(), entity)
		])
		return filtered_entities
	}

	/** 
	 * Get the set of shop names
	 * 
	 * @returns the set of names of known shops
	 */
	def getShopsNames() : Set<String> {
		return shops.keySet()
	}

	/** 
	 * Get the set of facility names
	 * 
	 * @returns the set of names of known facilities
	 */
	def getFacilitiesNames() : Set<String> {
		return facilities.keySet()
	}

	/**
	 * Get all charging stations
	 *
	 * @returns the set of names of known charging station facilities
	 */
	def getChargingStations() : HashMap<String, ChargingStationData> {
		return getFacilities(typeof(ChargingStationData))
	}

	/**
	 * Get all dumps
	 *
	 * @returns the set of names of known dump facilities
	 */
	def getDumps() : HashMap<String, DumpData> {
		return getFacilities(typeof(DumpData))
	}

	/**
	 * Get all resource nodes
	 *
	 * @returns the set of names of known resource node facilities
	 */
	def getResourceNodes() : HashMap<String, ResourceNodeData> {
		return getFacilities(typeof(ResourceNodeData))
	}

	/**
	 * Get all shops
	 *
	 * @returns the set of names of known shop facilities
	 */
	def getShops() : HashMap<String, ShopData> {
		return getFacilities(typeof(ShopData))
	}

	/**
	 * Get all storages
	 *
	 * @returns the set of names of known storage facilities
	 */
	def getStorages() : HashMap<String, StorageData> {
		return getFacilities(typeof(StorageData))
	}

	/**
	 * Get all wells
	 *
	 * @returns a HashMap of known well facilities
	 */
	def getWells() : HashMap<String, WellData> {
		return getFacilities(typeof(WellData))
	}

	/**
	 * Get all workshops
	 *
	 * @returns the set of names of known workshop facilities
	 */
	def getWorkshops() : HashMap<String, WorkshopData> {
		return getFacilities(typeof(WorkshopData))
	}

	/**
	 * Get all facilities of a given type
	 *
	 * @param type the class type of the facilities to return
	 * @returns a HsahMap of facilities matching type T
	 */
	private def <T extends FacilityData> getFacilities(type : Class<T>) : HashMap<String, T> {
		val filtered_facilities : HashMap<String, T> = new HashMap();
		// extract only facilities of desired type
		val stream_facilities =
			facilities
				.values()
				.stream()
				.filter([ facility : FacilityData |
					// check if this facility is of type we asked for
					return type.isInstance(facility)
				])

		// add all facilities of requested type to a hashmap and return
		stream_facilities.map([ facility : FacilityData |
			filtered_facilities.put(facility.getName(), facility as T)
		])
		return filtered_facilities
	}

	/**
	 * Get all regular jobs
	 *
	 * @returns the set of names of known regular jobs
	 */
	def getRegularJobs() : HashMap<String, JobData> {
		val filtered_jobs : HashMap<String, JobData> = new HashMap();
		// extract only regular jobs - these are directly of parent type JobData, filter out all other class types
		for (job : jobs.values()) {
			if (! (job instanceof AuctionJobData || job instanceof MissionData)) {
				filtered_jobs.put(job.getId(), job)
			}
		}
		return filtered_jobs
	}

	/**
	 * Get all auctions
	 *
	 * @returns the set of names of known auction jobs
	 */
	def getAuctionJobs() : HashMap<String, AuctionJobData> {
		return getJobs(typeof(AuctionJobData))
	}

	/**
	 * Get all missions
	 *
	 * @returns the set of names of known mission jobs
	 */
	def getMissionJobs() : HashMap<String, MissionData> {
		return getJobs(typeof(MissionData))
	}

	/**
	 * Get all jobs of a given type
	 *
	 * @param type the class type of the jobs to return
	 * @returns a HashMap of jobs matching type T
	 */
	private def <T extends JobData> getJobs(type : Class<T>) : HashMap<String, T> {
		val filtered_jobs : HashMap<String, T> = new HashMap();
		// extract only jobs of desired type
		val stream_jobs =
			jobs
			.values()
			.stream()
			.filter([ job : JobData |
				// check if this facility is of type we asked for
				return type.isInstance(job)
			])

		// add all jobs of requested type to a hashmap and return
		stream_jobs.map([ job : JobData |
			filtered_jobs.put(job.getId(), job as T)
		])
		return filtered_jobs
	}

	/**
	 * Step last seen getters for all relevant data types.
	 */
	def getStepLastSeen(d : FacilityData) : int {
		return getStepLastSeen(d.getName())
	}

	def getStepLastSeen(d : JobData) : int {
		return getStepLastSeen(d.getId())
	}

	def getStepLastSeen(d : EntityData) : int {
		return getStepLastSeen(d.getName())
	}

	def getStepLastSeen(id : String) : int {
		return this.stepLastSeen.containsKey(id) ? this.stepLastSeen.get(id) : -1
	}


























	///////////////////////////////////////////////////////////////////////////////
	//	EVENT CREATION FROM DATA
	// /////////////////////////////////////////////////////////////////////////////
	
	
	/** 
	 * Build a set E_TellPlayerTeamInfo events
	 * 		To send information about team members
	 * 
	 * @return an set of E_TellPlayerTeamInfo events containing the data for each player team-mate
	 */
	@Deprecated
	def getTeamMemberPercepts() : Set<E_TellEntityInfo> {
		var events = new HashSet<E_TellEntityInfo>()
		val players_team = getTeamEntities()

		for (agentName : players_team.keySet) {
			var sources = new HashSet<String>()
			sources.add(agentName)
			events.add(new E_TellPlayerTeamInfo(sources, players_team.get(agentName)))
		}
		return events
	}

	/** 
	 * Build a set E_TellEntityInfoevents
	 * 		To send information about opposition entities
	 * 
	 * @return an set of E_TellEntityInfo events 
	 */
	@Deprecated
	def getGameEntityPercepts() : Set<E_TellEntityInfo> {
		var events = new HashSet<E_TellEntityInfo>()
		val players_opp = getOppositionEntities()

		for (entityName : players_opp.keySet) {
			var ep = new E_TellEntityInfo(players_opp.keySet, players_opp.get(entityName))
			events.add(ep);
		}
		return events

	}

	/** 
	 * Build a set E_ActionStatusInfo
	 * 	To send information about all action result from team members
	 * 
	 * @param entities a map of complete entities with all details filled
	 * @return an set of E_ActionStatusInfo events 
	 */
	@Deprecated
	def getActionPercepts(entities : HashMap<String, EntityData>) : List<E_ActionStatusInfo>{
		var events = new ArrayList<E_ActionStatusInfo>
		
		for (entity : entities.values()) {
			var nameSet = new HashSet<String>()
			nameSet.add(entity.name)
			
			var ap = new E_ActionStatusInfo(nameSet, entity.lastAction)
			events.add(ap)
		}
		return events
		
	}
	
	
	/**
	 * Tools to get FACILITIES
	 * 	shops
	 *  charging station
	 *  workshops
	 *  dumps
	 *  storage
	 *  resource nodes
	 * 
	 * https://github.com/agentcontest/massim/blob/massim-2017-1.7/docs/scenario.md#facilities
	 */



	/** 
	 * Build a set E_ShopInfo
	 * To send information about all shops known
	 * 
	 * @return an set of E_ShopInfo events 
	 */
	@Deprecated
	def getShopSensedPercepts() : List<E_ShopInfo> {
		var events = new ArrayList<E_ShopInfo>

		for (shop : getShops().values) {
			var ssp = new E_ShopInfo(getTeamEntities.keySet, shop);
			events.add(ssp)
		}
		return events
	}

	/** 
	 * Build a set E_ChargingStationInfo
	 * To send information about all charging stations known
	 * 
	 * @return an set of E_ChargingStationInfo events 
	 */
	@Deprecated
	def getChargingStationSensedPercepts() : List<E_ChargingStationInfo>{
		var events = new ArrayList<E_ChargingStationInfo>
		
		for (station : getChargingStations().values){
			var cssp = new E_ChargingStationInfo(getTeamEntities.keySet, station);
			events.add(cssp)
		}
		return events
	}

	/** 
	 * Build a set E_WorkshopInfo
	 * To send information about all workshops known
	 * 
	 * @return an set of E_WorkshopInfo events 
	 */
	@Deprecated
	def getWorkshopSensedPercepts() : List<E_WorkshopInfo> {
		var events = new ArrayList<E_WorkshopInfo>

		for (workshop : getWorkshops().values) {
			var ssp = new E_WorkshopInfo(getTeamEntities.keySet, workshop);
			events.add(ssp)
		}
		return events
	}

	/** 
	 * Build a set E_DumpInfo
	 * To send information about all dumps known
	 * 
	 * @return an set of E_DumpInfo events 
	 */
	@Deprecated
	def getDumpSensedPercepts() : List<E_DumpInfo>{

		var events = new ArrayList<E_DumpInfo>

		for (dump : getDumps().values) {
			var dsp = new E_DumpInfo(getTeamEntities.keySet, dump);
			events.add(dsp)
		}
		return events
	}

	/** 
	 * Build a set E_StorageInfo
	 * To send information about all storage known
	 * 
	 * @return an set of E_StorageInfo events 
	 */
	@Deprecated
	def getStorageSensedPercepts() : List<E_StorageInfo> {
		var events = new ArrayList<E_StorageInfo>

		for (storage : getStorages().values) {
			var ssp = new E_StorageInfo(getTeamEntities.keySet, storage);
			events.add(ssp)
		}
		return events 
	}

	/** 
	 * Build a set E_ResourceInfo
	 * To send information about all resources known
	 * 
	 * @return an set of E_ResourceInfo events 
	 */
	@Deprecated
	def getResourceSensedPercepts() : List<E_ResourceInfo> { 
		var events = new ArrayList<E_ResourceInfo>

		for (resourceNode : getResourceNodes().values) {
			var rsp = new E_ResourceInfo(getTeamEntities.keySet, resourceNode);
			events.add(rsp)
		}
		return events 
	}

	/**
	 * Build a list of E_JobInfo events with regular jobs
	 * 
	 * @returns a list of events each containing a regular job 
	 */
	@Deprecated
	def getRegularJobEvents() : List<E_JobInfo> {
		var events = new ArrayList<E_JobInfo>

		for (job : getRegularJobs().entrySet) {
			var ev = new E_JobInfo(getTeamEntities.keySet, job.value);
			events.add(ev)
		}
		return events
	}

	/** 
	 * Build a list of E_JobInfo events with auction jobs data
	 * 
	 * @returns a list of events each containing a auction job  data
	 */
	@Deprecated
	def getAuctionJobPercepts() : List<E_JobInfo> {
		var events = new ArrayList<E_JobInfo>

		for (job : getAuctionJobs().entrySet) {
			var ev = new E_JobInfo(getTeamEntities.keySet, job.value, "auction");
			events.add(ev)
		}
		return events
	}

	/**
	 * Build a list of E_JobInfo events with mission jobs data
	 *
	 * @returns a list of events each containing a auction job  data
	 */
	@Deprecated
	def getMissionJobPercepts() : List<E_JobInfo> {
		var events = new ArrayList<E_JobInfo>

		for (job : getMissionJobs().entrySet) {
			var ev = new E_JobInfo(getTeamEntities.keySet, job.value, "mission");
			events.add(ev)
		}
		return events
	}
}
