/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator

import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Item
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Role
import eis.iilang.Percept
import java.util.Collection
import java.util.HashMap
import java.util.HashSet
import java.util.Map
import java.util.Set

/** 
 * @author bob
 * 
 */
 /**
  * SimStartBuffer, a class used to hold the map and simulation information presented as the SIM-START percepts. 
  */
class SimStartBuffer {
	public static var id : String;
	public static var mapName : String;
	public static var seedCapital : double;
	public static var simulationLength : int;
	public static var teamName : String;
	public static var roleMap : Map<String, Role>
	public static var itemMap : Map<String, Item>
	public static var filled : boolean

	public static def init() {
		id = ""
		seedCapital = 0
		simulationLength = 0
		teamName = ""
		roleMap = new HashMap();
		itemMap = new HashMap();
		filled = false
	}
    
	/**
	 * init Function used to populate and update the data buffer
	 * @param percepts, a collection of percepts used to update this structure.
	 */	
	public static def populate(percepts : Collection<Percept>) {
		// Here is the doc of messages: https://github.com/agentcontest/massim/blob/massim-2018-1.2/docs/eismassim.md

		// First Cycle to create all the master data
		for (p : percepts) {
			switch p.name {
				case "id" :{
					id = Util.extractString(p.parameters.get(0))
				} 
				case "map" : {
					mapName = Util.extractString(p.parameters.get(0))
				}
				case "seedCapital" : {
					seedCapital = Util.extractDouble(p.parameters.get(0))
				}
				case "steps" : {
					simulationLength = Util.extractInt(p.parameters.get(0))
				}
				case "team" : {
					teamName = Util.extractString(p.parameters.get(0))
				}
				case "role": { // role(drone,5,7,15,25,1,3,600,1000,20,40)
					var r = new Role(p)
					roleMap.put(r.name, r)
				}
				case "item": { // e.g., item(item44,9,roles([drone,car]),parts([item32,item2,item18,item10,item4]))
					var i = new Item(p)
					itemMap.put(i.name, i)
				}
				case "wellType": { // e.g., wellType(wellType2,1689,17,49,99)
					
				}
				case "upgrade" : { // e.g., upgrade(load,200,10)
				
				}
			}
		}
		
		// #TODO: TO BE DELETED EVENTUALLY
		//
		// WE USED TO DO ANOTHER LOOP ON PERCEPTS TO LINK ITEMS WITH ITS PARTS AND ROLES
		// HOWEVER, WE MAY NOW KNOW ALL THE ROLES YET. 
		// SO WE CHANGED THE AGGREGATOR TO STORE THE NAME OF THE PARTS AND ROLES, BUT NOT THEIR ACTUAL OBJECTS
		// IN THE AGGREGATOR
		//
		// SECOND loop on percepts to put link items with item parts needed and roles required to assemble
//		for (p : percepts) {
//			if (p.name == "item") {
//				// This is the item to be modified, by linking it to corresponding roles and parts
//				val itemName = Util.extractString(p.parameters.get(0))
//				val item = itemMap.get(itemName)	
//
//				// Get the parts list in item, find part item objects and link them into item
//				val partFunc = p.parameters.get(3) as Function
//				val partList = partFunc.parameters.get(0) as ParameterList
//
//				// For each part, get the corresponding item (representing that part) and add it to item
//				for (partInfo : partList) {
//					// 2018 version where item parts do not have quantity per required part, just the name
//					var pname = Util.extractString(partInfo)
//					// var pl = partInfo as ParameterList
//					// var pname = Util.extractString(pl.get(0))
//					
//					var pQty = 1	// no quantity per item, take 1
//					var pItem = itemMap.get(pname)
//					item.addPart(pItem, pQty)
//				}
//				// Get the require roles list in item, find role objects, and link them into item
//				val roleFunc = p.parameters.get(2) as Function
//				val roleList = roleFunc.parameters.get(0) as ParameterList
//				System.out.println(p)
//				System.out.println(roleList)
//
//				// For each part, get the corresponding item (representing that part) and add it to item
//				// 2018 version where item parts do not have quantity
//				for (r : roleList) {
//					System.out.println(r)
//					var rname = Util.extractString(r)
//					var role = roleMap.get(rname)
//					item.addRole(role)
//					System.out.println(r)
//				}
//			}
//		}


		filled = true
	}
	
	/**
	 * Get the ID of the current simulation
	 */
	public static def getId() : String {
		return id;
	}
	
	/**
	 * Get he map name of the current simulation
	 */
	public static def getMapName() : String {
		return mapName
	}
	
	/**
	 * Get the seed capital of the current simulation
	 */
	public static def getSeedCapital() : double {
		return seedCapital
	}
	
	/**
	 * Get the total number of steps this simulation will run for.
	 */
	public static def getSimulationLength() : int {
		return simulationLength
	}
	
	/**
	 * Get the team name
	 */
	public static def getTeamName() : String {
		return teamName
	}
	
	/**
	 * Get the profile of a particular role
	 * @param name String, the name of the role
	 */
	public static def getRole(name : String) : Role {
		return roleMap.get(name)
	}
	
	/**
	 * Get all the roles available in this map 
	 */
	public static def getAllRoles() : Set<Role> {
		var roles = new HashSet<Role>()
		
		for ( i : roleMap.values){
			roles.add(i)
		}
		
		return roles		
	}
	
	/**
	 * Get information about a perticular Item
	 * @Param name - The name of the item to query
	 */
	public static def getItem(name : String) : Item {
		return itemMap.get(name)
	}
	
	/**
	 * Get a set of all items in this map
	 */
	public static def getAllItems() : Set<Item> {
		var items = new HashSet<Item>()
		
		for (i : itemMap.values){
			items.add(i)
		}
		
		return items
	} 
}
