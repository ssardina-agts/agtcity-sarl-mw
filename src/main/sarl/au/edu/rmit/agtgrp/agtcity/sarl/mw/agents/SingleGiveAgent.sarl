/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM RMIT 2018+ server
 * 
 * Copyright (C) 2017-2021 The SARL-MASSIM Authors.
 * 
 * Contact Sebastian Sardina - ssardina@gmail.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.agents

// MW imports
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_MassimTalking
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_Reporting
import au.edu.rmit.agtgrp.agtcity.sarl.mw.skills.S_ConsoleReporting
import au.edu.rmit.agtgrp.agtcity.sarl.mw.skills.S_MassimTalking
import au.edu.rmit.agtgrp.agtcity.sarl.mw.utils.ConfHandler
import au.edu.rmit.agtgrp.agtcity.sarl.mw.util.State
import au.edu.rmit.agtgrp.agtcity.sarl.mw.events.E_EntitySensed

// EI imports
import eis.exceptions.PerceiveException
import eis.iilang.Action
import eis.iilang.EnvironmentState
import eis.iilang.Identifier
import eis.iilang.Numeral
import eis.iilang.Percept

// SARL imports
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules

// Java imports
import java.nio.file.Paths
import java.util.Collection
import java.util.Random
import java.util.Set


event E_SenseEnvironment

/** 
 * This is a monolithic SARL agent to manage ALL the entity agents of a team in the game simulation.
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent SingleGiveAgent {
	uses Logging, Lifecycle, DefaultContextInteractions
	uses C_Reporting, C_MassimTalking
	uses Schedules

	val myName = this.class.simpleName

	//	Static action objects
	val ACT_CONTINUE : Action = new Action("continue")
	val ACT_RECEIVE : Action = new Action("receive")
	val ACT_RECHARGE : Action = new Action("recharge")
	

	val agentLogLevel = 4 		// debug = 4 this is for the high-level agent, not for SARL
	val reportEILog = false	    // Report XML messages from server 
	val reportState = false 	// Report current state of entity and state tracking
	

	// We allow SARL systems to have a directory to store configuration files or data
	// In this case it is very simple as that directory will just have the EI configuration file eismassimconfig.json
	// but more complex SARL systems can make use of various files to use at boot time
	// The EI configuration file contains info to connect entities to server: server info (port/host + options) & entities credentials
	var eiConfigurationDir : String // the configuration folder to be used (given by argument or asked to the user)
	val eiConfigurationFileName = "eismassimconfig.json"	// fixed (should be inside the configuration dir)
	val eiConfigurationDirs = "conf"	// the folder containing many configuration folders
	
	// Entities to register in the server and control
	val RECEIVE_ENTITY = "entityA10"
	val RECEIVE_AGENT = "agentA10"
	val myConnectedEntities = #["entityA4", RECEIVE_ENTITY]


	// Data kept by this single SARL agent
	var last_step : int = -1
	var facilities : Set<String>
	var rand : Random = new Random()
	var state : State = new State() // used to track the current state as per percepts received
	
	
	/* 
	 * SARL agent is initialized 
	 *
	 * The SARL agent may control one more more game entities (trucks, motorcycles, drones, etc).
	 * 
	 * To do so, the agent will install a S_MassimTalking skill, which allows the agent to talk to the game server.
	 * 
	 * The skill uses the Environment Interface (EI) for MASSIM which provides a high-level connection to the game server.
	 * The skill needs an EI registration file "eismassimconfig.json" containing all the server info and
	 * all entity connections available (including username/password to authenticate) 
	 * We can tell the skill to control an sense among those available connections
	 * 
	 * Different EI registration files can be kept in different folders under conf/
	 * 
	 * If a directory is given in CLI argument, then  EI registration file eismassimconfig.json is search there.
	 * Otherwise, possible options as per folders under conf/ are scanned and given to user for selection	 * 
	 */
	on Initialize { // Should only be initializing with the EIS as a parameter.
			var args = newArrayList(occurrence.parameters) // may receive config directory at creation

			setLogLevel(agentLogLevel) // set debug level for Logging built-in capacity
			setSkill(new S_ConsoleReporting(myName), C_Reporting) // Give reporting skill via console to agent

			/**
			 * 1. FIRST, collect the directory where the server configuration file eiRegistrationFile is located
			 * If none is given as CLI argument, search inside conf/ folder and make user select one
			 */
			agent_says("PHASE 1: INSTALL MASSIM-TALKING SKILL WITH CONFIG FILE: {0}", eiConfigurationFileName)
			if (args.length != 0) 
				eiConfigurationDir = args.get(0) as String	// use the config dir given as CLI argument
			else 
				// Ask the user which folder in conf/ is to be used to use the EI config file
			eiConfigurationDir = ConfHandler.getConfDir(eiConfigurationDirs) // ask user which configuration dir to use 
			val eiConfigurationFile = Paths.get(eiConfigurationDir, eiConfigurationFileName)
			debug("\n***************************************************\n" +
				  	"Configuration settings:\n" + 
					"\t My SARL agent name: {0}\n" +
					"\t EI registration file: {1}\n" +
					"***************************************************", myName, eiConfigurationFile)

			try {

				/** 
				 * 2. SECOND, install Massim-Talking skill to talk to the  game server using EI registration file 
				 * (no actual connection to entities yet, just recording of registration file to be used)
				 */
				agent_says("PHASE 2: INSTALL MASSIM-TALKING SKILL WITH EI REGISTRATION FILE {0}", eiConfigurationFile)
				setSkill(new S_MassimTalking(eiConfigurationFile, reportEILog), C_MassimTalking)

				/** 
				 * 3. THIRD, configure the skill by providing which specific entities this SARL agent will control
				 * 	The entities to control have to be among those listed in the registration file
				 * 	No actual connection (or server authentication) happens at this step
				 */
				agent_says("PHASE 3: REGISTERING ENTITIES TO CONTROL: ", myConnectedEntities.toString)
				if (myConnectedEntities !== null)
					myConnectedEntities.forEach [ entityName : String |	// entityA1, entityA2, .../entityAn
						MT_registerEntityByName(entityName) // register entities to control (no authentication yet)
						agent_says("I have registered entity **{0}** for control and perception.", entityName)
					]

				/** 
				 * 4. FOURTH, we establish the connection to the game server via the EI 
				 * 
				 * All entities registered for control are authenticated and connected to the server
				 */
				agent_says("PHASE 4: INITIALIZING CONNECTIONS {1} USING EI CONFIG FILE {0}", eiConfigurationFileName);
				if (MT_initialize()) {
					agent_says("The EI is now initialized, entities are being authenticated...")
				} else {
					agent_shouts("Something wrong when initializing the EI, I am finished...")
					killMe
				}

				/** 
				 * 5. FIFTH, finally with all entities registered and connected, emit an event to start 
				 * sensing and controlling those entities 
				 */
				agent_says("PHASE 5 (FINAL): Emit E_SenseEnvironment() to start sensing and acting")
				in(2000)[emit(new E_SenseEnvironment())]	// wait 2 seconds to allow everyone to auhenticate to server
			} catch (e : Exception) {
				error("Sorry but I was not able to initialize the skill to talk to server! Message: {0}", e.message)
				e.printStackTrace()
				killMe
			}
	}

	/* 
	 * Handle the process of sensing the environment
	 */
	on E_SenseEnvironment {
		agent_shouts("Start sensing the environment for the following entities I control: {0}", MT_getEntityNames)

		// While the environment is running, wait for new percepts (read percepts for each player registered/connected)
		while (MT_getStatus() == EnvironmentState.RUNNING && !MT_getEntityNames().empty) {

			MT_getEntityNames().forEach([ entityName : String |

				try {
					// Collect all percepts received by the entity -- will block until percept is received from server
					// In general, all percepts for the entity: (role of agent --> collection of single percepts)
					// In this game, players usually are of one role, so an entity will receive just one set of single percepts
					// The MW will save the data for each entity as an EnityData object
					// which can be retrieved via  MT_getEntityState(entityName)
					debug("About to sense percepts for step {0} in entity {1}", last_step + 1, entityName)
					var percepts : Collection<Percept> percepts = MT_senseEntityPercepts(entityName) // This is BLOCKING!!
					
					// TODO: Change this to debug log
					//var plist = percepts.stream().map([p | return p.name]).collect(Collectors.toList)
					//System.out.println(String.join(",", plist))

					agent_says("I have just sensed entity {0} at step {1}", entityName, MT_getStepNo())

					// Collect information from SIM-START percepts regarding static info of the simulation
					// https://github.com/ssardina-agts/agtcity-server/blob/master/docs/eismassim.md#sim-start-percepts
					if (MT_getStepNo() == 0 || !state.isSimStartLoaded) {
						agent_says("Loading static info about simulation from sim-start percepts from entity {0}",
							entityName)
						state.recordSimStartData(percepts)
					}


					// Not needed anymore, the MW does this automatically when it consumes the percept for the entity above
					// MT_updateEntityState(entityName, percepts) // manually update the entity data
					
					// update the data of this entity in the state object
					state.updateEntityData(entityName, MT_getEntityState(entityName))
					
					// Aggregate the percepts just sensed into the current state object
					state.updateAggregatedGameState(percepts)
					agent_shouts("State updated with percepts from entity {0}", entityName)
					
					facilities = state.getFacilitiesNames()
					agent_shouts("Set of facilities known: {0}", facilities)
			
					// update the last step if the percept just processed has a higher step number
					last_step = MT_getStepNo()
					agent_shouts("I am finished sensing the environment - Step {0} for entity {1}", MT_getStepNo(),
						entityName)
						
					// Finally, emit that the entity has sensed a new set of percepts (and continue with next entity)	
					emit(new E_EntitySensed(last_step, entityName, percepts))

				} catch (e : PerceiveException) {
					agent_shouts("There was an error in perception ({0}), maybe not yet connected? Will try later...", e.message)
				} catch (e : Exception) {
					error("Something bad has happened during perception for entity **{0}**: {1}", entityName,
						e.toString)
					throw e
				}
			]) // FINISH sensing cycle for all entities - We have sensed every entity now
			agent_shouts("Finished sensing the environment at step {0} for all the entities connected.",
				last_step)
		} // end of game & sensing finished
	} // end of on E_SenseEnvironment


	on E_EntitySensed {
			reportState(occurrence.entityName)
	}
	on E_EntitySensed [reportState] {
		val entityName = occurrence.entityName

		agent_says("Here is the aggregated state after entity {0} has sensed: \n {1}",
			entityName, state.report());
	}

	// Need to recharge from solar!
	on E_EntitySensed [MT_getEntityState(occurrence.entityName).charge == 0] {
		val entityName = occurrence.entityName
		
		agent_says("Entity **{0}** is low in charge, charging from solar", entityName)
		MT_executeAction(occurrence.entityName, ACT_RECHARGE)
	}

	/* 
	 * When the agent is traveling and with fuel, just continue
	 */
	on E_EntitySensed [MT_getEntityState(occurrence.entityName).routeLength > 0 &&
		MT_getEntityState(occurrence.entityName).charge > 0] {
			
		val entityName = occurrence.entityName
		val entity = MT_getEntityState(entityName)

		agent_says("Continuing the path for entity **{0}**: {1} steps to go!", entityName, entity.routeLength)
		if (!MT_executeAction(entityName, ACT_CONTINUE))
			agent_shouts("Was not able to successfully send action goto({0}) for entity {1}", "continue", entityName)
	}

	/* 
	 * When the agent is not traveling.
	 * 
	 * If you are not in a shop, go to shop1
	 * 
	 * Otherwise if you are RECEIVE_ENTITY, just receive
	 * If you are not RECEIVE_ENTITY, then buy if you have nothing, otherwise give what you have to AGENT_ENTITY
	 */
	on E_EntitySensed 
		[MT_getEntityState(occurrence.entityName).routeLength == 0 &&
			MT_getEntityState(occurrence.entityName).charge > 0] {
			
		val entityName = occurrence.entityName
		val entityData = MT_getEntityState(entityName)
		val shops = state.getShops()	// shops we know about
		agent_shouts("Entity {1} is not moving at step {0}. Will receive, buy, or give", last_step, entityName) 

		// no matter who you are, if oyu are not in a shop, go to shop1
		if (!state.isAtShop(entityName)) {
			if (shops.size() > 0) { // We know some shop: go to shop1!
			// val destination = shops.values().get(rand.nextInt(shops.size() - 1))
				val destination = shops.get("shop1")

				agent_says("I will send entity **{1}** to location {0}", destination.name, entityName)
				if (!MT_executeAction(entityName, new Action("goto", new Identifier(destination.name))))
					agent_shouts("Was not able to successfully send action goto({0}) for entity {1}", destination.name,
						entityName)
			} else
				agent_shouts("I just don't know any facility to go yet, sorry...!")
		} else { // you are in a shop (hopefully shop1!)
			// if you are entityA1, just receive; 
			// otherwise (you are not entityA1), if you hold an item, give it. Otherwise buy something 
			if (entityName.equals(RECEIVE_ENTITY)) {
				agent_says("Entity **{1}** to {0}", "receive", entityName)
				if (!MT_executeAction(entityName, ACT_RECEIVE))
					agent_shouts("Was not able to successfully send action receive() for entity {1}", entityName)
			} else {
				if (!entityData.items.isEmpty()) {
					val item = entityData.items.get(0)
					agent_says("Entity **{1}** to give {0}", item.name, entityName)
					val give_action = new Action("give", new Identifier(RECEIVE_AGENT), new Identifier(item.name),
						new Numeral(item.amount)) 
           			if (!MT_executeAction(entityName, give_action))
						agent_shouts("Was not able to successfully send action give({0}) for entity {1}", item.name, entityName)
				} else  { // have no items, buy something!
					val stock = shops.get(entityData.facility).stocks
					val item = stock.get(rand.nextInt(stock.size() - 1))	// pick a random item in the shop
					val quantity = "1"
		
					agent_says("Entity **{1}** to buy {0}", item.name, entityName)
					if (!MT_executeAction(entityName, new Action("buy", new Identifier(item.name), new Identifier(quantity))))
						agent_shouts("Was not able to successfully send action buy({0}) for entity {1}", item.name, entityName)
				}
			}
		}
	}
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * The current state of an entity.
	 * This is printed every step for each entity this SARL agent controls.
	 *
	 * @param entity to report for
	 */
	def reportState(entityName : String) {
		val reportText = String.format(
		"\n======================== REPORT FOR ENTITY **%s** ========================\n" +
		"REPORT OF ENTITY: %s\n" +	
		"-------------------------------------------------\n" + 
		"Playing in map **%s** for **%d** simulation steps\n" +  
		"Team money: %d (seed capital was: %d)\n" + 
		"Team name: %s\n" + 
		"Entities known: %s\n" +		
		"========================== REPORT FOR ENTITY %s ==========================",
		entityName,
		MT_reportEntityState(entityName),
		state.mapName,
		state.simulationLength,
		state.money,
		state.seedCapital, 
		state.team,
		state.entities.keySet(),
		entityName
		)
		
		agent_says(reportText) 
	}
	
}
		
// /////////////////////////////////////////////////
// END OF FILE
// ///////////////////////////////////////////////// 
