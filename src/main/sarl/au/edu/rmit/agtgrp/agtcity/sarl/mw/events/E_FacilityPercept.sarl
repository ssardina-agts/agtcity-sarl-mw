/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.events

import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.ChargingStation
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Dump
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Facility
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.ItemContainer
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Resource
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Shop
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Storage
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Workshop
import java.util.Set

/** 
 * Emitted to distribute information about a facility 
 * 
 * @param facility - the facility to be distributed
 */
event E_FacilityInfo extends E_AgentInfo {
	var facility : Facility

	new(sources : Set<String>, facility : Facility) {
		super(sources);
		this.facility = facility;
	}
}


/** 
 * Emitted to distribute information about a shop
 * 
 * @param shop  - the shop to be distributed
 */
event E_ShopInfo extends E_FacilityInfo {
	var shop : Shop

	new(sources : Set<String>, shop : Shop) {
		super(sources, shop)
		this.shop = shop;
	}
}


/** 
 * Emitted to distribute information about a workshop
 * 
 * @param workshop - The workshop entity to be distributed
 */
event E_WorkshopInfo extends E_FacilityInfo {
	var workshop : Workshop

	new(sources : Set<String>, workshop : Workshop) {
		super(sources, workshop)
		this.workshop = workshop
	}
}

/** 
 * Emitted to distribute information about a charging stations
 * 
 * @param chargingStation The charging entity that was observed.
 */
event E_ChargingStationInfo extends E_FacilityInfo {
	var chargingStation : ChargingStation

	new(sources : Set<String>, chargingStation : ChargingStation) {
		super(sources, chargingStation)
		this.chargingStation = chargingStation
	}
}

/** 
 * Emitted to distribute information about a dumps
 * 
 * @param dump - The dump entity to be distributed.
 */
event E_DumpInfo extends E_FacilityInfo {
	var dump : Dump

	new(sources : Set<String>, dump : Dump) {
		super(sources, dump)
		this.dump = dump
	}
}
/** 
 * Emitted to distribute information about a storage
 * 
 * @param storage - The storage entity to be distributed
 */
event E_StorageInfo extends E_FacilityInfo {
	var storage : Storage

	new(sources : Set<String>, storage : Storage) {
		super(sources, storage)
		this.storage = storage
	}
}






/** 
 * currently not implemented
 */
event ShopUpdatePercept extends E_ShopInfo {
	var items : ItemContainer

	new(sources : Set<String>, shop : Shop, items : ItemContainer) {
		super(sources, shop)
		this.items = items;
	}
}



/** 
 * NOT IMPLEMENTED, 
 */
event StorageUsedUpdatedPercept extends E_FacilityInfo {
	// TODO COMPLETE ME> update the storage used if the other team has dropped or collected things
}

/** 
 * NOT IMPLEMENTED
 */
event StorageItemStoredPercept extends E_FacilityInfo {
	var items : ItemContainer

	new(sources : Set<String>, storage : Storage, items : ItemContainer) {
		super(sources, storage)
		this.items = items
	}
}

/** 
 * NOT IMPLEMENTED
 */
event StorageDeliveredUpdatedPercept extends E_FacilityInfo {
	var items : ItemContainer

	new(sources : Set<String>, storage : Storage, items : ItemContainer) {
		super(sources, storage)
		this.items = items
	}
}

/** 
 * ResourceSensedPercept emitted once per resource per tick
 * @param resouce - The resource patch that was observed.
 */
event E_ResourceInfo extends E_FacilityInfo {
	var resource : Resource

	new(sources : Set<String>, resource : Resource) {
		super(sources, resource)
		this.resource = resource
	}
}

