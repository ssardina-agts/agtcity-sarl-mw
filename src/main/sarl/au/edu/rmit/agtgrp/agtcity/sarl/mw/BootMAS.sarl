/** 
 * Class to boot up an agent controller
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw

import io.sarl.bootstrap.SRE
import io.sarl.lang.core.Agent

import java.util.Scanner

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 * Class can be run with two optional CLI options:
 * 
 * 1) the agent to boot up	(if missing, this class will list available and ask)
 * 2) the directory where the configuration file eismassimconfig.json is located (if missing agent will list and ask)
 * 
 */
@SuppressWarnings("all")
class BootMAS {
	// Code adapted from example how to boot from name string: 	http://tinyurl.com/ycolmey5
	def static main(args : String[]) : void {
		var sre = SRE::bootstrap
		sre.verboseLevel = 7

		val basePackage = "au.edu.rmit.agtgrp.agtcity.sarl.mw.agents"
		val AGENTS_AVAILABLE : String[] = #["SingleRandomAgent", "SingleGiveAgent"]

		var agentToLaunch : String
		if (args.length == 0) { // if not agent given in CLI argument, list the available ones and ask user for one
			agentToLaunch = getSelectionFromuser("Choose the controller to run: ", AGENTS_AVAILABLE)
		} else {
			agentToLaunch = args.get(0) 	// get the agent name from CLI first argument
		}

		System.out.println(String.format("Running controller: \"%s\"", agentToLaunch))
		var fullyQualifiedAgent : String
		switch agentToLaunch {
			case 'default':
				fullyQualifiedAgent = basePackage + ".SingleRandomAgent"
			case 'SingleRandomAgent':
				fullyQualifiedAgent = basePackage + ".SingleRandomAgent"
			case 'SingleGiveAgent':
				fullyQualifiedAgent = basePackage + ".SingleGiveAgent"
			default:
				throw new IllegalArgumentException("Invalid agent to start: " + agentToLaunch)
		}


		// now get agent class for fullQualifiedAgent and boot it
		System.out.println(String.format("Loading SARL controller agent %s (%s)", fullyQualifiedAgent, agentToLaunch))
		val type = Class.forName(fullyQualifiedAgent)
		var SARLagent : Class<? extends Agent>
		SARLagent = type.asSubclass(Agent)
		assert SARLagent != null;

		if (args.length == 2) { // second CLI argument states which config dir has to be used to find "eismassimconfig.json"
			sre.startAgent(SARLagent, args.get(1)) 		// pass it to agent if there was one
		} else {
			sre.startAgent(SARLagent)
		}

		
	}

	/** 
	 * Given a set of options, present them with a message and ask user to select one; return the option string
	 */
	@SuppressWarnings("discouraged_reference")
	static def getSelectionFromuser(message : String, options : String[]) : String {
		for (var i = 0; i < options.size; i++) {
			System.out.println(String.format("%d. %s", i + 1, options.get(i)))
		}
		val in : Scanner = new Scanner(System.in)
		var confNum : Integer = null
		while (confNum === null) {
			try {
				confNum = Integer.parseInt(in.next())
				if (confNum < 1 || confNum > options.size) {
					System.out.println("No option for that number, try again:")
			                confNum = null
				}
			} catch (e : Exception) {
				System.out.println("Invalid number, try again:")
			}
		}
		return options.get(confNum.intValue - 1)
	}
}
