/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM 2017 server
 * Copyright (C) 2017 The SARL-MASSIM Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.mw.aggregator

import eis.iilang.Function
import eis.iilang.ParameterList
import eis.iilang.Percept
import java.util.Collection
import java.util.HashMap

import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.Position
import au.edu.rmit.agtgrp.agtcity.sarl.mw.entities.TeamEntityAgent

/** 
 * @author boblo
 * 
 */
 /**
  * Class used to build a TeamMemberEntity. Builder required as multiple percepts needs to be aggregated together 
  * to build the entity. 
  */
class PlayerStateBuilder {

	/**
	 * build Builds a PlayerState and aggregates all the percepts together.
	 * @param name - the name of the agent that received all the percepts. This function will build a PlayerState for the agent that received the percepts.
	 * @param percepts - the collection of percepts that was received.
	 */
    public static def build(name : String, percepts : Collection<Percept>) : TeamEntityAgent {

		var gameEntity = EntityBuffer.get(name)
		var agentName = name // name of the agent
		var team = TeamBuffer.selfteam // name of the team
		var role = gameEntity.role // role of the agent (e.g., car, motorbike, drone, truck)
		var route = new HashMap // agent's current route

		var position = PositionBuilder.buildPosition(percepts) // location (lat,long) of agent
		var charge : double // agent's current battery level
		var load : double			// agent's current load capacity
		var routeLength : double 	// length of the agent's current route
		var facilityName : String 	// name of the agent's current facility
		var items = new HashMap		// items (with quantities) that the agent has
		
        // Populate Entity fields
        for (p : percepts) {
            switch p.name {
                case "charge": {
					charge = Util.extractDouble(p.parameters.get(0))
                }
                case "load": {
					load = Util.extractDouble(p.parameters.get(0))
                }
                case "routeLength": {
					routeLength = Util.extractDouble(p.parameters.get(0))
                }
                case "facility": {
					facilityName = Util.extractString(p.parameters.get(0))
                }
                case "hasItem": {
					var itemName = Util.extractString(p.parameters.get(0))
                    var itemQty = Util.extractDouble(p.parameters.get(1))
                    items.put(itemName, itemQty)
                }
                case "route": {
					var params = p.parameters.get(0);
                    var wps = params as ParameterList
                    for (w : wps) {
                        var f = w as Function
                        var lat = Util.extractDouble(f.parameters.get(1))
                        var lon = Util.extractDouble(f.parameters.get(2))
                        var wayPoint = new Position(lat, lon)
                        var index = Util.extractInt(f.parameters.get(0));
                        route.put(index, wayPoint)
                    }
                }
            }
        }

        return new TeamEntityAgent(
        	agentName,
			role, 
			team, 
			position.lat, 
			position.lon,
			charge,
			load,
			items,
			route,
			routeLength,
			facilityName
        )
    }
}
